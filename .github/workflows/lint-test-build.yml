name: Lint, Test, Build

on:
  push:
    branches:
      - sebastiaan/features/move-ci-to-github-actions


jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    env:
      BOT_API_KEY: foo
      BOT_SENTRY_DSN: blah
      BOT_TOKEN: bar
      REDDIT_CLIENT_ID: spam
      REDDIT_SECRET: ham
      REDIS_PASSWORD: ''

      PIP_NO_CACHE_DIR: false
      PIP_USER: 1
      PIPENV_HIDE_EMOJIS: 1
      PIPENV_IGNORE_VIRTUALENVS: 1
      PIPENV_NOSPIN: 1
      PRE_COMMIT_HOME: ${{ github.workspace }}/pre-commit-cache
      PYTHONUSERBASE: ${{ github.workspace }}/py-user-base

    steps:
      - name: Add custom PYTHONUSERBASE to PATH
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Python Dependency Caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: |
            python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-${{ hashFiles('./Pipfile', './Pipfile.lock') }}

      - name: Install dependencies using pipenv
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          pip install pipenv
          pipenv install --dev --deploy --system

      - name: Mock pipenv binary
        run: |
          printf '%s\n%s' '#!/bin/bash' '"${@:2}"' > ${{ env.PYTHONUSERBASE }}/bin/pipenv
          chmod +x ${{ env.PYTHONUSERBASE }}/bin/pipenv

      - name: Pre-commit Environment Caching
        uses: actions/cache@v2
        id: pre_commit_cache
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            precommit-0-${{ runner.os }}-${{ env.PRE_COMMIT_HOME }}-${{ hashFiles('./.pre-commit-config.yaml') }}

      - name: Run pre-commit hooks
        run: export PIP_USER=0; pre-commit run --all-files

      - name: Run tests and generate coverage report
        run: |
            coverage run -m xmlrunner
            coverage report -m && coverage xml -o coverage.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: coverage.xml
